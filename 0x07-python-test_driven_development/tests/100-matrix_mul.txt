Test cases for ``100-matrix_mul`` module.
=====================================

Using ``matrix_mul``


This tests ``matrix_mul`` from 100-matrix_mul
	>>> mat = __import__('100-matrix_mul').matrix_mul
	>>> mat([[2,3],[4,5]], [[6,7],[8,9]])
	[[36, 41], [64, 73]]
	>>> mat([[2,3],[4,5], [3, 2]], [[6,7],[8,9]])
	[[36, 41], [64, 73], [34, 39]]
	>>> mat([[2,3],[4,5]], [[6,7],[8,'9']])
	Traceback (most recent call last):
		...
	TypeError: m_b should contain only integers or floats
	>>> mat([[2,(4)],[4,5]], [[6,7],[8,9]])
	[[44, 50], [64, 73]]
	>>> mat([[2,'4'],[4,5]], [[6,7],[8,9]])
	Traceback (most recent call last):
		...
	TypeError: m_a should contain only integers or floats
	>>> mat([[2,3],[4,5]], [[6,7],[8]])
	Traceback (most recent call last):
		...
	TypeError: each row of m_b must be of the same size
	>>> mat([[2],[4,5]], [[6,7],[8,9]])
	Traceback (most recent call last):
		...
	TypeError: each row of m_a must be of the same size
	>>> mat([[2,4.3],[4,5]], [[6.1,7],[8.2,9]])
	[[47.459999999999994, 52.699999999999996], [65.4, 73]]
	>>> mat(3, [[6,7],[8,9]])
	Traceback (most recent call last):
		...
	TypeError: m_a must be a list
	>>> mat([[2,4.3],[4,5]], 5)
	Traceback (most recent call last):
		...
	TypeError: m_b must be a list
	>>> mat([[2,4.3],[4,5]], [5])
	Traceback (most recent call last):
		...
	TypeError: m_b must be a list of lists
	>>> mat([4], [[6.1,7],[8.2,9]])
	Traceback (most recent call last):
		...
	TypeError: m_a must be a list of lists
	>>> mat([[]], [[]])
	Traceback (most recent call last):
		...
	ValueError: m_a can't be empty
	>>> mat([[3,4],[2,4]], [[]])
	Traceback (most recent call last):
		...
	ValueError: m_b can't be empty
	>>> mat([[3,4],[2,4]], [[4], [2, 5]])
	Traceback (most recent call last):
		...
	TypeError: each row of m_b must be of the same size
	>>> mat()
	Traceback (most recent call last):
		...
	TypeError: matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'
	>>> 
